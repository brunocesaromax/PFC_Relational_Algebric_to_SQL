%prelude{
#include "yystype.h"
#include "Node.c"
#include "Tree.c"

}
%token NUMERO, NOME, SIGMA, PI, ASSIGNMENT, RHO, AND, OR, NOT, UNION, INTERSECTION, SUBTRACTION, PRODUCT_CARTESIAN, JOIN, NATURAL_JOIN, DIVISION, COUNT, AVERAGE, MAX, MIN, SUM, FSCRIPT, LEFT_OUTER_JOIN, RIGHT_OUTER_JOIN, COMPLETE_OUTER_JOIN, COMENTARIO;

init:
    {_tool_initialize();} consulta
;

consulta:
        ( operacao_consulta {_build_tree();} | COMENTARIO) consulta
    |
        ( operacao_consulta {_build_tree();} | COMENTARIO)
;

operacao_consulta:
        '(' {_add_node_stack("(");}
        operacao_consulta
        ')' {_add_node_stack(")");}
   |
        (
            operacao_unaria
          |
            operacao_binaria
        )

;

operacao_unaria:
        selecao
    |
        projecao
    |
        renomeacao1
    |
        renomeacao2
    |
        agrupamento
;

operacao_binaria:
        (
                 NOME<y>    {_add_node_stack(y.stringval);}
            |
                 operacao_consulta
            |
                '('         {_add_node_stack("(");}
                NOME<y>     {_add_node_stack(y.stringval);}
                ')'         {_add_node_stack(")");}
        )
        tipo_operacao_binaria
        (
                 NOME<y>    {_add_node_stack(y.stringval);}
            |
                 operacao_consulta
            |
                 '('        {_add_node_stack("(");}
                 NOME<y>    {_add_node_stack(y.stringval);}
                 ')'        {_add_node_stack(")");}
        )
    |
        (
                NOME<y>     {_add_node_stack(y.stringval);}
            |
                operacao_consulta
            |
                '('         {_add_node_stack("(");}
                NOME<y>     {_add_node_stack(y.stringval);}
                ')'         {_add_node_stack(")");}
        )
        NATURAL_JOIN      {_add_node_stack("NATURAL_JOIN");}
        renomeacao2
;


tipo_operacao_binaria:
        UNION               {_add_node_stack("UNION");}
    |
        INTERSECTION         {_add_node_stack("INTERSECTION");}
    |
        SUBTRACTION           {_add_node_stack("SUBTRACTION");}
    |
        PRODUCT_CARTESIAN  {_add_node_stack("PRODUCT_CARTESIAN");}
    |
        JOIN
        predicado           {_add_node_stack("JOIN");}
    |
        NATURAL_JOIN      {_add_node_stack("NATURAL_JOIN");}
    |
        LEFT_OUTER_JOIN
        predicado           {_add_node_stack("LEFT_OUTER_JOIN");}
    |
        RIGHT_OUTER_JOIN
        predicado           {_add_node_stack("RIGHT_OUTER_JOIN");}
    |
        COMPLETE_OUTER_JOIN
        predicado           {_add_node_stack("COMPLETE_OUTER_JOIN");}
    |
        DIVISION             {_add_node_stack("DIVISION");}
;

selecao:
    SIGMA
    predicado   {_add_node_stack("SIGMA");}
    '('         {_add_node_stack("(");}
    (
                NOME<y>   {_add_node_stack(y.stringval);}
            |
                operacao_consulta
    )
    ')'         {_add_node_stack(")");}
;

projecao:
    PI
    lista_atributos {_add_node_stack("PI");}
    '('             {_add_node_stack("(");}
    (
                NOME<y> {_add_node_stack(y.stringval);}
            |
                operacao_consulta
    )
    ')'             {_add_node_stack(")");}
;

renomeacao1:
        NOME<y> {_add_node_stack(y.stringval);}
        ASSIGNMENT            {_add_node_stack("ASSIGNMENT");}
        operacao_consulta

    |
        NOME<y>
        '(' lista_atributos   {_add_node_stack(y.stringval);} ')'
        ASSIGNMENT            {_add_node_stack("ASSIGNMENT");}
        operacao_consulta
;

renomeacao2:
        RHO              { _add_node_stack("RHO");}
        NOME<y>          { _add_node_stack(y.stringval);}
        '('              { _add_node_stack("(");}
        (
                     NOME<y>  {_add_node_stack(y.stringval);}
                |
                     operacao_consulta
        )
        ')'              {_add_node_stack(")");}
    |
        RHO              { _add_node_stack("RHO");}
        NOME<y>          {_add_node_stack(y.stringval);}
        '('              {_add_symbols_attribute("(",1);}
        lista_atributos
        ')'              {_add_symbols_attribute(")",1);}
        '('              {_add_node_stack("(");}
        (
                     NOME<y>  {_add_node_stack(y.stringval);}
                |
                     operacao_consulta
        )
        ')'              {_add_node_stack(")");}
    |
        RHO              { _add_node_stack("RHO");}
        '('              {_add_symbols_attribute("(",1);}
        lista_atributos
        ')'              {_add_symbols_attribute(")",1);}
        '('              {_add_node_stack("(");}
        (
                     NOME<y>  {_add_node_stack(y.stringval);}
                |
                     operacao_consulta
        )
        ')'              {_add_node_stack(")");}
;

agrupamento:
    (lista_atributos)?
    FSCRIPT
    lista_funcoes_agregadas { _add_node_stack("FSCRIPT");}
    '('
    (
                NOME<y>     {_add_node_stack(y.stringval);}
            |
                operacao_consulta
    )
    ')'
;

predicado:
        condicao
    |
        condicao
        operador_booleano
        predicado
    |
        '('         {_add_symbols_predicate("(");}
        predicado
        ')'         {_add_symbols_predicate(")");}
        (operador_booleano predicado)?
;

condicao:
        '('       {_add_symbols_predicate("(");}
        condicao
        ')'       {_add_symbols_predicate(")");}
    |
        (
                    NOME<a>   {_add_symbols_predicate(a.stringval);}
                |
                    NUMERO<a> {_add_symbols_predicate(a.stringval);}
        )
        operador_comparacao
        (
                    NOME<a>   {_add_symbols_predicate(a.stringval);}
                |
                    NUMERO<a> {_add_symbols_predicate(a.stringval);}
        )
;

operador_comparacao:
        '='     {_add_symbols_predicate("=");}
    |
        '<'     {_add_symbols_predicate("<");}
    |
        '>'     {_add_symbols_predicate(">");}
    |
        '<' '=' {_add_symbols_predicate("<=");}
    |
        '>' '=' {_add_symbols_predicate(">=");}
    |
        '!' '=' {_add_symbols_predicate("!=");}
;

operador_aritmetico:
        '+' {_add_symbols_attribute("+",1);}
    |
        '-' {_add_symbols_attribute("-",1);}
    |
        '*' {_add_symbols_attribute("*",1);}
    |
        '/' {_add_symbols_attribute("/",1);}
;

operador_booleano:
        AND {_add_symbols_predicate(" AND ");}
    |
        OR  {_add_symbols_predicate(" OR ");}
;

lista_atributos:
    (
                NOME<a>   {_add_symbols_attribute(a.stringval,1);}
            |
                NUMERO<a> {_add_symbols_attribute(a.stringval,1);}
    )
    (
            operador_aritmetico
            (
                        NOME<a>   {_add_symbols_attribute(a.stringval,1);}
                    |
                        NUMERO<a> {_add_symbols_attribute(a.stringval,1);}
            )
    )*
    ( ','     {_add_symbols_attribute(",",1);} lista_atributos )?
;

lista_funcoes_agregadas:
    (
                COUNT   {_add_symbols_attribute("COUNT ",2);}
            |
                AVERAGE {_add_symbols_attribute("AVERAGE ",2);}
            |
                MAX     {_add_symbols_attribute("MAX ",2);}
            |
                MIN     {_add_symbols_attribute("MIN ",2);}
            |
                SUM     {_add_symbols_attribute("SUM ",2);}
    )
    NOME<y> {_add_symbols_attribute(y.stringval,2);}
    ( ','   {_add_symbols_attribute(",",2);} lista_funcoes_agregadas )?
;