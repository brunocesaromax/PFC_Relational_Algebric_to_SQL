%prelude{
    #include "yystype.h"
    #include "Node.c"
}
%token NUMBER, NAME, SIGMA, PI, ASSIGNMENT, RHO, AND, OR, NOT, UNION, INTERSECTION, SUBTRACTION, PRODUCT_CARTESIAN, JOIN, NATURAL_JOIN, DIVISION, COUNT, AVERAGE, MAX, MIN, SUM, FSCRIPT, LEFT_OUTER_JOIN, RIGHT_OUTER_JOIN, COMPLETE_OUTER_JOIN, COMMENT;

init:
    {_tool_initialize();} query {_generate_file_json();}
;

query:
        ( query_operation {_build_tree();} | COMMENT) query
    |
        ( query_operation {_build_tree();} | COMMENT)
;

query_operation:
        '(' {_add_node_stack("(");}
        query_operation
        ')' {_add_node_stack(")");}
   |
        (
            unary_operation
          |
            binary_operation
        )

;

unary_operation:
        selection
    |
        projection
    |
        renaming1
    |
        renaming2
    |
        grouping
;

binary_operation:
        (
                 NAME<y>    {_add_node_stack(y.stringval);}
            |
                 query_operation
            |
                '('         {_add_node_stack("(");}
                NAME<y>     {_add_node_stack(y.stringval);}
                ')'         {_add_node_stack(")");}
        )
        binary_type_operation
        (
                 NAME<y>    {_add_node_stack(y.stringval);}
            |
                 query_operation
            |
                 '('        {_add_node_stack("(");}
                 NAME<y>    {_add_node_stack(y.stringval);}
                 ')'        {_add_node_stack(")");}
        )
    |
        (
                NAME<y>     {_add_node_stack(y.stringval);}
            |
                query_operation
            |
                '('         {_add_node_stack("(");}
                NAME<y>     {_add_node_stack(y.stringval);}
                ')'         {_add_node_stack(")");}
        )
        NATURAL_JOIN      {_add_node_stack("NATURAL_JOIN");}
        renaming2
;


binary_type_operation:
        UNION               {_add_node_stack("UNION");}
    |
        INTERSECTION         {_add_node_stack("INTERSECTION");}
    |
        SUBTRACTION           {_add_node_stack("SUBTRACTION");}
    |
        PRODUCT_CARTESIAN  {_add_node_stack("PRODUCT_CARTESIAN");}
    |
        JOIN
        predicate_rule           {_add_node_stack("JOIN");}
    |
        NATURAL_JOIN      {_add_node_stack("NATURAL_JOIN");}
    |
        LEFT_OUTER_JOIN
        predicate_rule           {_add_node_stack("LEFT_OUTER_JOIN");}
    |
        RIGHT_OUTER_JOIN
        predicate_rule           {_add_node_stack("RIGHT_OUTER_JOIN");}
    |
        COMPLETE_OUTER_JOIN
        predicate_rule           {_add_node_stack("COMPLETE_OUTER_JOIN");}
    |
        DIVISION             {_add_node_stack("DIVISION");}
;

selection:
    SIGMA
    predicate_rule   {_add_node_stack("SIGMA");}
    '('         {_add_node_stack("(");}
    (
                NAME<y>   {_add_node_stack(y.stringval);}
            |
                query_operation
    )
    ')'         {_add_node_stack(")");}
;

projection:
    PI
    attribute_list  {_add_node_stack("PI");}
    '('             {_add_node_stack("(");}
    (
                NAME<y> {_add_node_stack(y.stringval);}
            |
                query_operation
    )
    ')'             {_add_node_stack(")");}
;

renaming1:
        NAME<y>          {_add_node_stack(y.stringval);}
        ASSIGNMENT       {_add_node_stack("ASSIGNMENT");}
        query_operation

    |
        NAME<y>
        '(' attribute_list    {_add_node_stack(y.stringval);} ')'
        ASSIGNMENT            {_add_node_stack("ASSIGNMENT");}
        query_operation
;

renaming2:
        RHO              { _add_node_stack("RHO");}
        NAME<y>          { _add_node_stack(y.stringval);}
        '('              { _add_node_stack("(");}
        (
                     NAME<y>  {_add_node_stack(y.stringval);}
                |
                     query_operation
        )
        ')'              {_add_node_stack(")");}
    |
        RHO              { _add_node_stack("RHO");}
        NAME<y>          {_add_node_stack(y.stringval);}
        '('              {_add_symbols_attribute("(",1);}
        attribute_list
        ')'              {_add_symbols_attribute(")",1);}
        '('              {_add_node_stack("(");}
        (
                     NAME<y>  {_add_node_stack(y.stringval);}
                |
                     query_operation
        )
        ')'              {_add_node_stack(")");}
    |
        RHO              { _add_node_stack("RHO");}
        '('              {_add_symbols_attribute("(",1);}
        attribute_list
        ')'              {_add_symbols_attribute(")",1);}
        '('              {_add_node_stack("(");}
        (
                     NAME<y>  {_add_node_stack(y.stringval);}
                |
                     query_operation
        )
        ')'              {_add_node_stack(")");}
;

grouping:
    (attribute_list)?
    FSCRIPT
    aggregated_functions_list { _add_node_stack("FSCRIPT");}
    '('
    (
                NAME<y>       {_add_node_stack(y.stringval);}
            |
                query_operation
    )
    ')'
;

predicate_rule:
        condition
    |
        condition
        boolean_operator
        predicate_rule
    |
        '('         {_add_symbols_predicate("(");}
        predicate_rule
        ')'         {_add_symbols_predicate(")");}
        (boolean_operator predicate_rule)?
;

condition:
        '('       {_add_symbols_predicate("(");}
        condition
        ')'       {_add_symbols_predicate(")");}
    |
        (
                    NAME<a>   {_add_symbols_predicate(a.stringval);}
                |
                    NUMBER<a> {_add_symbols_predicate(a.stringval);}
        )
        comparison_operator
        (
                    NAME<a>   {_add_symbols_predicate(a.stringval);}
                |
                    NUMBER<a> {_add_symbols_predicate(a.stringval);}
        )
;

comparison_operator:
        '='     {_add_symbols_predicate("=");}
    |
        '<'     {_add_symbols_predicate("<");}
    |
        '>'     {_add_symbols_predicate(">");}
    |
        '<' '=' {_add_symbols_predicate("<=");}
    |
        '>' '=' {_add_symbols_predicate(">=");}
    |
        '!' '=' {_add_symbols_predicate("!=");}
;

arithmetic_operator:
        '+' {_add_symbols_attribute("+",1);}
    |
        '-' {_add_symbols_attribute("-",1);}
    |
        '*' {_add_symbols_attribute("*",1);}
    |
        '/' {_add_symbols_attribute("/",1);}
;

boolean_operator:
        AND {_add_symbols_predicate(" AND ");}
    |
        OR  {_add_symbols_predicate(" OR ");}
;

attribute_list:
    (
                NAME<a>   {_add_symbols_attribute(a.stringval,1);}
            |
                NUMBER<a> {_add_symbols_attribute(a.stringval,1);}
    )
    (
            arithmetic_operator
            (
                        NAME<a>   {_add_symbols_attribute(a.stringval,1);}
                    |
                        NUMBER<a> {_add_symbols_attribute(a.stringval,1);}
            )
    )*
    ( ','     {_add_symbols_attribute(",",1);} attribute_list )?
;

aggregated_functions_list:
    (
                COUNT   {_add_symbols_attribute("COUNT ",2);}
            |
                AVERAGE {_add_symbols_attribute("AVERAGE ",2);}
            |
                MAX     {_add_symbols_attribute("MAX ",2);}
            |
                MIN     {_add_symbols_attribute("MIN ",2);}
            |
                SUM     {_add_symbols_attribute("SUM ",2);}
    )
    NAME<y> {_add_symbols_attribute(y.stringval,2);}
    ( ','   {_add_symbols_attribute(",",2);} aggregated_functions_list )?
;